# Generated by Django 5.2.7 on 2025-10-04 16:51

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="PromotionalCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(db_index=True, max_length=50, unique=True)),
                (
                    "discount_type",
                    models.CharField(
                        choices=[
                            ("percentage", "Percentage"),
                            ("fixed", "Fixed Amount"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "discount_value",
                    models.IntegerField(
                        help_text="Percentage (0-100) or fixed amount in cents"
                    ),
                ),
                ("valid_from", models.DateTimeField()),
                ("valid_until", models.DateTimeField()),
                ("max_uses", models.IntegerField(blank=True, null=True)),
                ("max_uses_per_user", models.IntegerField(default=1)),
                ("current_uses", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "promotional_codes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SubscriptionPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "plan_type",
                    models.CharField(
                        choices=[
                            ("FREE", "Free"),
                            ("PREMIUM_MONTHLY", "Premium Monthly"),
                            ("PREMIUM_ANNUAL", "Premium Annual"),
                        ],
                        max_length=30,
                        unique=True,
                    ),
                ),
                ("max_resolution", models.CharField(default="1440p", max_length=10)),
                ("ad_free", models.BooleanField(default=True)),
                ("premium_content_access", models.BooleanField(default=True)),
                ("early_access", models.BooleanField(default=False)),
                (
                    "price_monthly_cents",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "price_annual_cents",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("display_currency", models.CharField(default="USD", max_length=3)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "subscription_plans",
                "ordering": ["price_monthly_cents"],
            },
        ),
        migrations.CreateModel(
            name="VideoTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=50, unique=True)),
                ("slug", models.SlugField(unique=True)),
                ("usage_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "video_tags",
                "ordering": ["-usage_count", "name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(db_index=True, max_length=255, unique=True),
                ),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        max_length=50,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(3)],
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=100)),
                ("last_name", models.CharField(blank=True, max_length=100)),
                ("birthdate", models.DateField(blank=True, null=True)),
                ("avatar_url", models.URLField(blank=True, max_length=500)),
                ("bio", models.TextField(blank=True, max_length=500)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("GUEST", "Guest Viewer"),
                            ("VIEWER", "Authenticated Viewer"),
                            ("CREATOR", "Creator"),
                            ("MODERATOR", "Moderator"),
                            ("ADMIN", "Admin"),
                            ("PREMIUM", "Premium Subscriber"),
                        ],
                        default="VIEWER",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("SUSPENDED", "Suspended"),
                            ("BANNED", "Banned"),
                            ("PENDING_VERIFICATION", "Pending Verification"),
                            ("DELETED", "Deleted"),
                        ],
                        default="ACTIVE",
                        max_length=30,
                    ),
                ),
                ("mfa_enabled", models.BooleanField(default=False)),
                ("mfa_secret", models.CharField(blank=True, max_length=32)),
                ("failed_login_attempts", models.IntegerField(default=0)),
                ("locked_until", models.DateTimeField(blank=True, null=True)),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "preferred_language",
                    models.CharField(
                        choices=[("en", "English"), ("bn", "Bangla")],
                        default="en",
                        max_length=5,
                    ),
                ),
                ("email_notifications_enabled", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("email_verified", models.BooleanField(default=False)),
                ("email_verified_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(3)],
                    ),
                ),
                (
                    "handle",
                    models.SlugField(
                        help_text="Unique channel handle (e.g., @channelname)",
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True, max_length=5000)),
                ("avatar_url", models.URLField(blank=True, max_length=500)),
                ("banner_url", models.URLField(blank=True, max_length=500)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("SUSPENDED", "Suspended"),
                            ("UNDER_REVIEW", "Under Review"),
                            ("DELETED", "Deleted"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("verified", models.BooleanField(default=False)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("subscriber_count", models.IntegerField(db_index=True, default=0)),
                ("total_views", models.BigIntegerField(default=0)),
                ("total_videos", models.IntegerField(default=0)),
                ("monetization_enabled", models.BooleanField(default=False)),
                (
                    "monetization_enabled_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("max_videos_per_week", models.IntegerField(default=10)),
                ("max_video_duration_minutes", models.IntegerField(default=15)),
                ("max_file_size_gb", models.IntegerField(default=2)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channel",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "channels",
                "ordering": ["-subscriber_count", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChannelAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                ("total_views", models.IntegerField(default=0)),
                ("unique_viewers", models.IntegerField(default=0)),
                ("total_watch_time_seconds", models.BigIntegerField(default=0)),
                ("average_view_duration_seconds", models.IntegerField(default=0)),
                ("likes", models.IntegerField(default=0)),
                ("dislikes", models.IntegerField(default=0)),
                ("comments", models.IntegerField(default=0)),
                ("shares", models.IntegerField(default=0)),
                ("new_subscribers", models.IntegerField(default=0)),
                ("unsubscribers", models.IntegerField(default=0)),
                ("net_subscriber_change", models.IntegerField(default=0)),
                ("estimated_revenue_cents", models.IntegerField(default=0)),
                (
                    "traffic_source_data",
                    models.JSONField(
                        default=dict, help_text="Breakdown of traffic sources"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics",
                        to="core.channel",
                    ),
                ),
            ],
            options={
                "db_table": "channel_analytics",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(max_length=2000)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("FLAGGED", "Flagged"),
                            ("HIDDEN", "Hidden"),
                            ("REMOVED", "Removed"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("like_count", models.IntegerField(default=0)),
                ("dislike_count", models.IntegerField(default=0)),
                ("reply_count", models.IntegerField(default=0)),
                ("edited", models.BooleanField(default=False)),
                ("edited_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="core.comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "comments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CommentReaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_like", models.BooleanField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="core.comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comment_reactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "comment_reactions",
            },
        ),
        migrations.CreateModel(
            name="CreatorPayout",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("period_start", models.DateField()),
                ("period_end", models.DateField()),
                ("ad_revenue_cents", models.IntegerField(default=0)),
                ("premium_revenue_cents", models.IntegerField(default=0)),
                ("total_revenue_cents", models.IntegerField(default=0)),
                ("platform_fee_cents", models.IntegerField(default=0)),
                ("payment_gateway_fee_cents", models.IntegerField(default=0)),
                ("tax_withheld_cents", models.IntegerField(default=0)),
                ("net_payout_cents", models.IntegerField(default=0)),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("payment_method", models.CharField(blank=True, max_length=100)),
                ("payment_reference", models.CharField(blank=True, max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("failure_reason", models.TextField(blank=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payouts",
                        to="core.channel",
                    ),
                ),
            ],
            options={
                "db_table": "creator_payouts",
                "ordering": ["-period_end", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Flag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("SPAM", "Spam"),
                            ("HATE_SPEECH", "Hate Speech"),
                            ("SEXUAL_CONTENT", "Sexual Content"),
                            ("VIOLENCE", "Violence"),
                            ("COPYRIGHT", "Copyright Violation"),
                            ("MISINFORMATION", "Misinformation"),
                            ("CHILD_ABUSE", "Child Abuse"),
                            ("OTHER", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                ("reason_detail", models.TextField(blank=True, max_length=1000)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("REVIEWING", "Under Review"),
                            ("RESOLVED", "Resolved"),
                            ("DISMISSED", "Dismissed"),
                            ("ESCALATED", "Escalated"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="flags_reviewed",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="flags_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "flags",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ModerationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("WARNING", "Warning"),
                            ("DEMONETIZE", "Demonetize"),
                            ("TEMP_SUSPENSION", "Temporary Suspension"),
                            ("PERMANENT_BAN", "Permanent Ban"),
                            ("CONTENT_REMOVAL", "Content Removal"),
                            ("NO_ACTION", "No Action"),
                        ],
                        max_length=30,
                    ),
                ),
                ("reason", models.TextField(max_length=2000)),
                ("duration_days", models.IntegerField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "moderator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="moderation_actions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_flag",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="actions",
                        to="core.flag",
                    ),
                ),
            ],
            options={
                "db_table": "moderation_logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.CharField(db_index=True, max_length=100, unique=True)),
                ("expires_at", models.DateTimeField()),
                ("used", models.BooleanField(default=False)),
                ("used_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_reset_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "password_reset_tokens",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "payment_gateway",
                    models.CharField(
                        choices=[
                            ("SSLCOMMERZ", "SSLCommerz"),
                            ("2CHECKOUT", "2Checkout"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "gateway_transaction_id",
                    models.CharField(max_length=255, unique=True),
                ),
                ("amount_cents", models.IntegerField()),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("status", models.CharField(default="pending", max_length=20)),
                ("payment_method", models.CharField(blank=True, max_length=50)),
                ("failure_reason", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "payment_transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PayoutMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "method_type",
                    models.CharField(
                        choices=[
                            ("bank_transfer", "Bank Transfer"),
                            ("paypal", "PayPal"),
                            ("mobile_banking", "Mobile Banking"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "account_details",
                    models.JSONField(help_text="Encrypted account information"),
                ),
                ("is_default", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payout_methods",
                        to="core.channel",
                    ),
                ),
            ],
            options={
                "db_table": "payout_methods",
                "ordering": ["-is_default", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Playlist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=150)),
                ("description", models.TextField(blank=True, max_length=1000)),
                ("is_public", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playlists",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "playlists",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PopularSearch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query", models.CharField(db_index=True, max_length=255, unique=True)),
                ("search_count", models.IntegerField(default=0)),
                ("click_through_rate", models.FloatField(default=0.0)),
                ("daily_count", models.IntegerField(default=0)),
                ("weekly_count", models.IntegerField(default=0)),
                ("monthly_count", models.IntegerField(default=0)),
                ("last_searched_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "popular_searches",
                "ordering": ["-search_count"],
                "indexes": [
                    models.Index(
                        fields=["-search_count"], name="popular_sea_search__b72fa3_idx"
                    ),
                    models.Index(fields=["query"], name="popular_sea_query_9aeed0_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="PromoCodeUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("discount_applied_cents", models.IntegerField()),
                ("used_at", models.DateTimeField(auto_now_add=True)),
                (
                    "transaction",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.paymenttransaction",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="promo_code_usages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "promo_code",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usages",
                        to="core.promotionalcode",
                    ),
                ),
            ],
            options={
                "db_table": "promo_code_usages",
                "ordering": ["-used_at"],
            },
        ),
        migrations.CreateModel(
            name="RecommendationCache",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "video_ids",
                    models.JSONField(
                        default=list, help_text="List of recommended video IDs (max 50)"
                    ),
                ),
                (
                    "context",
                    models.CharField(
                        default="home",
                        help_text="home, watch_next, subscriptions, etc.",
                        max_length=50,
                    ),
                ),
                ("algorithm_version", models.CharField(default="v1", max_length=20)),
                ("score_threshold", models.FloatField(default=0.0)),
                ("expires_at", models.DateTimeField(db_index=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendation_caches",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "recommendation_caches",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="RefreshToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.CharField(db_index=True, max_length=500, unique=True)),
                ("expires_at", models.DateTimeField()),
                ("revoked", models.BooleanField(default=False)),
                ("revoked_at", models.DateTimeField(blank=True, null=True)),
                ("device_info", models.CharField(blank=True, max_length=255)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="refresh_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "refresh_tokens",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SocialAuth",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("provider", models.CharField(max_length=50)),
                ("provider_user_id", models.CharField(max_length=255)),
                ("access_token", models.TextField(blank=True)),
                ("refresh_token", models.TextField(blank=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="social_auths",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "social_auths",
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notifications_enabled", models.BooleanField(default=True)),
                (
                    "subscribed_at",
                    models.DateTimeField(auto_now_add=True, db_index=True),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscribers",
                        to="core.channel",
                    ),
                ),
                (
                    "subscriber",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "channel_subscriptions",
                "ordering": ["-subscribed_at"],
            },
        ),
        migrations.AddField(
            model_name="promotionalcode",
            name="applicable_plans",
            field=models.ManyToManyField(
                blank=True, related_name="promotional_codes", to="core.subscriptionplan"
            ),
        ),
        migrations.CreateModel(
            name="UserSubscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("CANCELLED", "Cancelled"),
                            ("EXPIRED", "Expired"),
                            ("GRACE_PERIOD", "Grace Period"),
                            ("SUSPENDED", "Suspended"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                (
                    "payment_gateway",
                    models.CharField(
                        choices=[
                            ("SSLCOMMERZ", "SSLCommerz"),
                            ("2CHECKOUT", "2Checkout"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "gateway_subscription_id",
                    models.CharField(blank=True, max_length=255),
                ),
                ("gateway_customer_id", models.CharField(blank=True, max_length=255)),
                ("start_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("renewal_date", models.DateTimeField()),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("cancel_at_period_end", models.BooleanField(default=False)),
                ("grace_period_ends_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="subscriptions",
                        to="core.subscriptionplan",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="active_subscription",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_subscriptions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="paymenttransaction",
            name="subscription",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="transactions",
                to="core.usersubscription",
            ),
        ),
        migrations.CreateModel(
            name="UserSuspension",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(max_length=2000)),
                ("is_permanent", models.BooleanField(default=False)),
                ("suspended_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("lifted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "lifted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="suspensions_lifted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "suspended_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="suspensions_issued",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="suspensions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_suspensions",
                "ordering": ["-suspended_at"],
            },
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, max_length=10000)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("UPLOADING", "Uploading"),
                            ("PROCESSING", "Processing"),
                            ("TRANSCODING", "Transcoding"),
                            ("PUBLISHED", "Published"),
                            ("FLAGGED", "Flagged"),
                            ("UNDER_REVIEW", "Under Review"),
                            ("REMOVED", "Removed"),
                            ("ARCHIVED", "Archived"),
                        ],
                        db_index=True,
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("UNLISTED", "Unlisted"),
                            ("PREMIUM", "Premium Only"),
                            ("PRIVATE", "Private"),
                        ],
                        default="PUBLIC",
                        max_length=20,
                    ),
                ),
                ("age_restricted", models.BooleanField(default=False)),
                (
                    "geo_restrictions",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of country codes where video is blocked",
                    ),
                ),
                ("thumbnail_url", models.URLField(blank=True, max_length=500)),
                ("thumbnail_auto_generated", models.BooleanField(default=True)),
                ("view_count", models.BigIntegerField(db_index=True, default=0)),
                ("like_count", models.IntegerField(default=0)),
                ("dislike_count", models.IntegerField(default=0)),
                ("comment_count", models.IntegerField(default=0)),
                ("share_count", models.IntegerField(default=0)),
                ("average_watch_time_seconds", models.IntegerField(default=0)),
                (
                    "completion_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("duration_seconds", models.IntegerField(default=0)),
                ("language", models.CharField(default="en", max_length=5)),
                (
                    "published_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("last_activity_at", models.DateTimeField(auto_now_add=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="videos",
                        to="core.channel",
                    ),
                ),
            ],
            options={
                "db_table": "videos",
                "ordering": ["-published_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserWatchHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("watch_percentage", models.FloatField(default=0.0)),
                ("watch_duration_seconds", models.IntegerField(default=0)),
                ("completed", models.BooleanField(default=False)),
                ("last_position_seconds", models.IntegerField(default=0)),
                ("watched_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="watch_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="watch_history_entries",
                        to="core.video",
                    ),
                ),
            ],
            options={
                "db_table": "user_watch_history",
                "ordering": ["-watched_at"],
            },
        ),
        migrations.CreateModel(
            name="TrendingVideo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rank", models.IntegerField()),
                (
                    "score",
                    models.FloatField(
                        help_text="Trending score based on views, velocity, engagement"
                    ),
                ),
                ("category", models.CharField(blank=True, max_length=50)),
                ("region", models.CharField(default="BD", max_length=2)),
                ("date", models.DateField(db_index=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trending_entries",
                        to="core.video",
                    ),
                ),
            ],
            options={
                "db_table": "trending_videos",
                "ordering": ["date", "rank"],
            },
        ),
        migrations.CreateModel(
            name="SearchQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query", models.CharField(db_index=True, max_length=255)),
                (
                    "normalized_query",
                    models.CharField(
                        db_index=True,
                        help_text="Lowercase, trimmed version for grouping",
                        max_length=255,
                    ),
                ),
                ("result_count", models.IntegerField(default=0)),
                ("click_position", models.IntegerField(blank=True, null=True)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="search_queries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "clicked_video",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="search_clicks",
                        to="core.video",
                    ),
                ),
            ],
            options={
                "db_table": "search_queries",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RevenueShare",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                ("ad_impressions", models.IntegerField(default=0)),
                ("ad_revenue_cents", models.IntegerField(default=0)),
                ("premium_views", models.IntegerField(default=0)),
                ("premium_revenue_cents", models.IntegerField(default=0)),
                ("total_revenue_cents", models.IntegerField(default=0)),
                (
                    "creator_share_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=70.0,
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("creator_revenue_cents", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="revenue_shares",
                        to="core.channel",
                    ),
                ),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="revenue_shares",
                        to="core.video",
                    ),
                ),
            ],
            options={
                "db_table": "revenue_shares",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="PlaylistItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.IntegerField(default=0)),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                (
                    "playlist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="core.playlist",
                    ),
                ),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playlist_items",
                        to="core.video",
                    ),
                ),
            ],
            options={
                "db_table": "playlist_items",
                "ordering": ["position", "added_at"],
            },
        ),
        migrations.CreateModel(
            name="Interaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("LIKE", "Like"),
                            ("DISLIKE", "Dislike"),
                            ("VIEW", "View"),
                            ("NOT_INTERESTED", "Not Interested"),
                            ("WATCH_TIME", "Watch Time"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "value",
                    models.IntegerField(
                        default=0,
                        help_text="Watch time in seconds or binary flag (1/0) for like/dislike",
                    ),
                ),
                (
                    "session_id",
                    models.CharField(blank=True, db_index=True, max_length=100),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.CharField(blank=True, max_length=500)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactions",
                        to="core.video",
                    ),
                ),
            ],
            options={
                "db_table": "interactions",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.AddField(
            model_name="comment",
            name="video",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comments",
                to="core.video",
            ),
        ),
        migrations.CreateModel(
            name="VideoAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                ("views", models.IntegerField(default=0)),
                ("unique_viewers", models.IntegerField(default=0)),
                ("watch_time_seconds", models.BigIntegerField(default=0)),
                ("average_view_duration_seconds", models.IntegerField(default=0)),
                ("average_percentage_viewed", models.FloatField(default=0.0)),
                ("likes", models.IntegerField(default=0)),
                ("dislikes", models.IntegerField(default=0)),
                ("comments", models.IntegerField(default=0)),
                ("shares", models.IntegerField(default=0)),
                (
                    "retention_curve",
                    models.JSONField(
                        default=list,
                        help_text="Audience retention at each 5% interval (list of floats)",
                    ),
                ),
                (
                    "demographics_data",
                    models.JSONField(
                        default=dict, help_text="Age, gender, location breakdown"
                    ),
                ),
                (
                    "traffic_sources",
                    models.JSONField(default=dict, help_text="Where viewers came from"),
                ),
                ("estimated_revenue_cents", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics",
                        to="core.video",
                    ),
                ),
            ],
            options={
                "db_table": "video_analytics",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="VideoTagRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="video_relations",
                        to="core.videotag",
                    ),
                ),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tag_relations",
                        to="core.video",
                    ),
                ),
            ],
            options={
                "db_table": "video_tag_relations",
            },
        ),
        migrations.CreateModel(
            name="VideoVersion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("version_number", models.IntegerField(default=1)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "source_object_key",
                    models.CharField(
                        help_text="S3 object key for original upload", max_length=500
                    ),
                ),
                ("source_file_size_bytes", models.BigIntegerField(default=0)),
                ("source_duration_seconds", models.IntegerField(default=0)),
                ("source_resolution", models.CharField(blank=True, max_length=20)),
                ("source_codec", models.CharField(blank=True, max_length=50)),
                (
                    "transcoding_profile_set",
                    models.CharField(
                        default="standard",
                        help_text="ABR ladder profile used",
                        max_length=50,
                    ),
                ),
                (
                    "transcoding_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("transcoding_started_at", models.DateTimeField(blank=True, null=True)),
                (
                    "transcoding_completed_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("transcoding_error_message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions",
                        to="core.video",
                    ),
                ),
            ],
            options={
                "db_table": "video_versions",
                "ordering": ["-version_number"],
            },
        ),
        migrations.CreateModel(
            name="VideoAsset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resolution",
                    models.CharField(
                        choices=[
                            ("240p", "240p (426x240)"),
                            ("360p", "360p (640x360)"),
                            ("480p", "480p (854x480)"),
                            ("720p", "720p (1280x720)"),
                            ("1080p", "1080p (1920x1080)"),
                            ("1440p", "1440p (2560x1440)"),
                        ],
                        max_length=10,
                    ),
                ),
                ("bitrate_kbps", models.IntegerField()),
                (
                    "playlist_url",
                    models.URLField(
                        help_text="Master or variant playlist URL", max_length=500
                    ),
                ),
                (
                    "segment_path_prefix",
                    models.CharField(
                        help_text="S3 prefix for segment files", max_length=500
                    ),
                ),
                ("file_size_bytes", models.BigIntegerField(default=0)),
                ("codec", models.CharField(default="H.264", max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "video_version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assets",
                        to="core.videoversion",
                    ),
                ),
            ],
            options={
                "db_table": "video_assets",
                "ordering": ["-bitrate_kbps"],
            },
        ),
        migrations.AddField(
            model_name="video",
            name="active_version",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="active_for_video",
                to="core.videoversion",
            ),
        ),
        migrations.CreateModel(
            name="Subtitle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("language_code", models.CharField(max_length=5)),
                ("language_name", models.CharField(max_length=50)),
                (
                    "file_key",
                    models.CharField(
                        help_text="S3 key for WebVTT file", max_length=500
                    ),
                ),
                ("file_url", models.URLField(max_length=500)),
                ("is_published", models.BooleanField(default=True)),
                ("is_auto_generated", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "video_version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subtitles",
                        to="core.videoversion",
                    ),
                ),
            ],
            options={
                "db_table": "subtitles",
            },
        ),
        migrations.CreateModel(
            name="WatchSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_id", models.CharField(db_index=True, max_length=100)),
                ("watch_time_seconds", models.IntegerField(default=0)),
                (
                    "completion_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("rebuffer_count", models.IntegerField(default=0)),
                ("rebuffer_duration_seconds", models.IntegerField(default=0)),
                ("startup_time_ms", models.IntegerField(default=0)),
                ("average_bitrate_kbps", models.IntegerField(default=0)),
                ("device_type", models.CharField(blank=True, max_length=50)),
                ("browser", models.CharField(blank=True, max_length=100)),
                ("os", models.CharField(blank=True, max_length=100)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("country_code", models.CharField(blank=True, max_length=2)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="watch_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="watch_sessions",
                        to="core.video",
                    ),
                ),
            ],
            options={
                "db_table": "watch_sessions",
                "ordering": ["-started_at"],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["email", "status"], name="users_email_f7aa6a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["username"], name="users_usernam_baeb4b_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["role", "status"], name="users_role_bc23be_idx"),
        ),
        migrations.AddIndex(
            model_name="channel",
            index=models.Index(fields=["handle"], name="channels_handle_5f25e1_idx"),
        ),
        migrations.AddIndex(
            model_name="channel",
            index=models.Index(
                fields=["status", "verified"], name="channels_status_89bc92_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="channel",
            index=models.Index(
                fields=["subscriber_count"], name="channels_subscri_7ac275_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="channelanalytics",
            index=models.Index(
                fields=["channel", "date"], name="channel_ana_channel_604aee_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="channelanalytics",
            unique_together={("channel", "date")},
        ),
        migrations.AddIndex(
            model_name="commentreaction",
            index=models.Index(
                fields=["comment", "is_like"], name="comment_rea_comment_e1eaa4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="commentreaction",
            index=models.Index(fields=["user"], name="comment_rea_user_id_3510b8_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="commentreaction",
            unique_together={("comment", "user")},
        ),
        migrations.AddIndex(
            model_name="creatorpayout",
            index=models.Index(
                fields=["channel", "status"], name="creator_pay_channel_c3a331_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="creatorpayout",
            index=models.Index(
                fields=["status", "created_at"], name="creator_pay_status_95bcab_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="creatorpayout",
            unique_together={("channel", "period_start", "period_end")},
        ),
        migrations.AddIndex(
            model_name="flag",
            index=models.Index(
                fields=["content_type", "object_id"], name="flags_content_a6550a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="flag",
            index=models.Index(
                fields=["status", "created_at"], name="flags_status_cae75a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="flag",
            index=models.Index(fields=["user"], name="flags_user_id_f364c2_idx"),
        ),
        migrations.AddIndex(
            model_name="moderationlog",
            index=models.Index(
                fields=["moderator", "created_at"],
                name="moderation__moderat_0013e3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="moderationlog",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="moderation__content_414078_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="moderationlog",
            index=models.Index(
                fields=["action", "created_at"], name="moderation__action_ce18d6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="playlist",
            index=models.Index(
                fields=["user", "is_public"], name="playlists_user_id_110ea6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="promocodeusage",
            index=models.Index(
                fields=["promo_code", "user"], name="promo_code__promo_c_69f07c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendationcache",
            index=models.Index(
                fields=["user", "context"], name="recommendat_user_id_a11853_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendationcache",
            index=models.Index(
                fields=["expires_at"], name="recommendat_expires_30c967_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="recommendationcache",
            unique_together={("user", "context")},
        ),
        migrations.AddIndex(
            model_name="refreshtoken",
            index=models.Index(
                fields=["user", "revoked"], name="refresh_tok_user_id_a7fb02_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="refreshtoken",
            index=models.Index(fields=["token"], name="refresh_tok_token_e21bac_idx"),
        ),
        migrations.AddIndex(
            model_name="socialauth",
            index=models.Index(
                fields=["user", "provider"], name="social_auth_user_id_762ee7_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="socialauth",
            unique_together={("provider", "provider_user_id")},
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["subscriber", "channel"], name="channel_sub_subscri_afe17f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["channel", "subscribed_at"],
                name="channel_sub_channel_f89aa8_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="subscription",
            unique_together={("subscriber", "channel")},
        ),
        migrations.AddIndex(
            model_name="usersubscription",
            index=models.Index(
                fields=["user", "status"], name="user_subscr_user_id_c57286_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersubscription",
            index=models.Index(
                fields=["status", "renewal_date"], name="user_subscr_status_fc7bb7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(
                fields=["user", "status"], name="payment_tra_user_id_131e27_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(
                fields=["gateway_transaction_id"], name="payment_tra_gateway_532615_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersuspension",
            index=models.Index(
                fields=["user", "suspended_at"], name="user_suspen_user_id_3f3109_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userwatchhistory",
            index=models.Index(
                fields=["user", "-watched_at"], name="user_watch__user_id_1238e5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userwatchhistory",
            index=models.Index(
                fields=["video", "watched_at"], name="user_watch__video_i_aa3315_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userwatchhistory",
            unique_together={("user", "video")},
        ),
        migrations.AddIndex(
            model_name="trendingvideo",
            index=models.Index(
                fields=["date", "region", "rank"], name="trending_vi_date_b06670_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="trendingvideo",
            unique_together={("video", "date", "region")},
        ),
        migrations.AddIndex(
            model_name="searchquery",
            index=models.Index(
                fields=["normalized_query", "created_at"],
                name="search_quer_normali_18078d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="searchquery",
            index=models.Index(
                fields=["user", "created_at"], name="search_quer_user_id_175990_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="revenueshare",
            index=models.Index(
                fields=["channel", "date"], name="revenue_sha_channel_3266c6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="revenueshare",
            index=models.Index(
                fields=["video", "date"], name="revenue_sha_video_i_82c909_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="revenueshare",
            unique_together={("video", "date")},
        ),
        migrations.AddIndex(
            model_name="playlistitem",
            index=models.Index(
                fields=["playlist", "position"], name="playlist_it_playlis_55432e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="playlistitem",
            unique_together={("playlist", "video")},
        ),
        migrations.AddIndex(
            model_name="interaction",
            index=models.Index(
                fields=["video", "type", "timestamp"],
                name="interaction_video_i_241031_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="interaction",
            index=models.Index(
                fields=["user", "video", "type"], name="interaction_user_id_5d6b48_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="interaction",
            index=models.Index(
                fields=["session_id"], name="interaction_session_5d1df1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(
                fields=["video", "status", "created_at"],
                name="comments_video_i_68aa4f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(
                fields=["user", "created_at"], name="comments_user_id_88f50c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(fields=["parent"], name="comments_parent__9f8798_idx"),
        ),
        migrations.AddIndex(
            model_name="videoanalytics",
            index=models.Index(
                fields=["video", "date"], name="video_analy_video_i_811368_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="videoanalytics",
            unique_together={("video", "date")},
        ),
        migrations.AddIndex(
            model_name="videotagrelation",
            index=models.Index(fields=["video"], name="video_tag_r_video_i_6bf8d0_idx"),
        ),
        migrations.AddIndex(
            model_name="videotagrelation",
            index=models.Index(fields=["tag"], name="video_tag_r_tag_id_443555_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="videotagrelation",
            unique_together={("video", "tag")},
        ),
        migrations.AddIndex(
            model_name="videoversion",
            index=models.Index(
                fields=["video", "is_active"], name="video_versi_video_i_5ac044_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="videoversion",
            unique_together={("video", "version_number")},
        ),
        migrations.AddIndex(
            model_name="videoasset",
            index=models.Index(
                fields=["video_version", "resolution"],
                name="video_asset_video_v_23632e_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="videoasset",
            unique_together={("video_version", "resolution")},
        ),
        migrations.AddIndex(
            model_name="video",
            index=models.Index(
                fields=["channel", "status"], name="videos_channel_dd9f69_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="video",
            index=models.Index(
                fields=["status", "visibility", "published_at"],
                name="videos_status_bb53ce_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="video",
            index=models.Index(fields=["view_count"], name="videos_view_co_377577_idx"),
        ),
        migrations.AddIndex(
            model_name="video",
            index=models.Index(
                fields=["-published_at"], name="videos_publish_f97095_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subtitle",
            index=models.Index(
                fields=["video_version", "language_code"],
                name="subtitles_video_v_3394dc_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="subtitle",
            unique_together={("video_version", "language_code")},
        ),
        migrations.AddIndex(
            model_name="watchsession",
            index=models.Index(
                fields=["video", "started_at"], name="watch_sessi_video_i_d0f8be_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="watchsession",
            index=models.Index(
                fields=["user", "started_at"], name="watch_sessi_user_id_ed3aa8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="watchsession",
            index=models.Index(
                fields=["session_id"], name="watch_sessi_session_9ce4ef_idx"
            ),
        ),
    ]
